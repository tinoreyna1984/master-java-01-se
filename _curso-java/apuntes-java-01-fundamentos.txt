Java - Fundamentos
******************

Instalación de Java
===================

Windows
-------

* Descargar del sitio web de Java la versión más estable o reciente. (e.g. 17)
* Instalar aceptando todas las indicaciones.
* Agregar en Sistema -> Variables de entorno la ruta donde está el ejecutable principal en la variable Path (e.g. C:\Program Files\Java\jdk-17.0.4.1\bin), sea en variables de usuario o de sistema
* Agregar la variable JAVA_HOME con el valor del directorio anterior sin la carpeta bin (e.g. C:\Program Files\Java\jdk-17.0.4.1) en variables de entorno del sistema y del usuario.

Instalación de IntelliJ IDEA
============================

* Ir a jetbrains.com
* Descargar la versión más reciente de IntelliJ IDEA.
* Instalar IntelliJ IDEA.


Crear nuevo proyecto con IntelliJ IDEA
======================================

* Clic en Nuevo proyecto -> nombre: HolaMundo
* Crearlo en una carpeta que tenga suficiente espacio.

Programación en Java
====================

Hola Mundo
----------

public class HolaMundo {
    public static void main(String[] args){
        System.out.println("Hola mundo desde Java");
    }
}

Tipos de dato y declaración de variables con tipado fuerte (convencional)
-------------------------------------------------------------------------

int edad = 30;

Uso de "var" (tipado débil de variables)
----------------------------------------

var edad = 30; // 30
edad = "30"; // "30"
edad = (30 >= 28); // true

El uso de "var" se restringe al ámbito local dentro de un método.

Tipos de datos primitivos
-------------------------

* Boolean: true/false
* Character: caracteres alfanuméricos, Unicode y bytes
  La clase Character como envolvente tiene atributos constantes útiles:
  Character.BYTES: cantidad de bytes que tiene el tipo Character (2)
  Character.SIZE: tamaño en bits que tiene el tipo Character (16)
  Character.MIN_VALUE: valor mínimo del tipo Character ('\u0000' o 0)
  Character.MAX_VALUE: valor máximo del tipo Character ('\uffff' o 65535)
* Enteros: byte, short, int, long
  La clase Byte como envolvente tiene atributos constantes útiles:
  Byte.BYTES: cantidad de bytes que tiene el tipo Byte (1)
  Byte.SIZE: tamaño en bits que tiene el tipo Byte (8)
  Byte.MIN_VALUE: valor mínimo del tipo Byte (-128)
  Byte.MAX_VALUE: valor máximo del tipo Byte (127)
  La clase Short como envolvente tiene atributos constantes útiles:
  Short.BYTES: cantidad de bytes que tiene el tipo Short (2)
  Short.SIZE: tamaño en bits que tiene el tipo Short (16)
  Short.MIN_VALUE: valor mínimo del tipo Short (-32768)
  Short.MAX_VALUE: valor máximo del tipo Short (32767)
  La clase Integer como envolvente tiene atributos constantes útiles:
  Integer.BYTES: cantidad de bytes que tiene el tipo Integer (4)
  Integer.SIZE: tamaño en bits que tiene el tipo Integer (32)
  Integer.MIN_VALUE: valor mínimo del tipo Integer (-2147483648)
  Integer.MAX_VALUE: valor máximo del tipo Integer (2147483647)
  La clase Long como envolvente tiene atributos constantes útiles:
  Long.BYTES: cantidad de bytes que tiene el tipo Long (8)
  Long.SIZE: tamaño en bits que tiene el tipo Long (64)
  Long.MIN_VALUE: valor mínimo del tipo Long (-9223372036854775808)
  Long.MAX_VALUE: valor máximo del tipo Long (9223372036854775807)
* Decimales: float, double
  La clase Float como envolvente tiene atributos constantes útiles:
  Float.BYTES: cantidad de bytes que tiene el tipo Float (4)
  Float.SIZE: tamaño en bits que tiene el tipo Float (32)
  Float.MIN_VALUE: valor mínimo del tipo Float (1.4E-45)
  Float.MAX_VALUE: valor máximo del tipo Float (3.4028235E38)
  La clase Double como envolvente tiene atributos constantes útiles:
  Double.BYTES: cantidad de bytes que tiene el tipo Double (8)
  Double.SIZE: tamaño en bits que tiene el tipo Double (64)
  Double.MIN_VALUE: valor mínimo del tipo Double (4.9E-324)
  Double.MAX_VALUE: valor máximo del tipo Double (1.7976931348623157E308)

Sistemas numéricos basados en int: decimal, binario, octal y hexadecimal
------------------------------------------------------------------------

int numeroBinario = 0b11110; // 11110 en binario
int numeroOctal = 036; // un cero delante de un entero convierte el valor a octal
int numeroHex = 0x1e; // 0x convierte el valor a hexadecimal

Funciones de la clase Integer que convierten a cadenas de binario, octal y hexadecimal
--------------------------------------------------------------------------------------

Integer.toBinaryString(numeroDecimal); // toBinaryString convierte el número decimal a una cadena que representa el equivalente a un número binario
Integer.toOctalString(numeroDecimal); // toOctalString convierte el número decimal a una cadena que representa el equivalente a un número octal
Integer.toHexString(numeroDecimal); // toHexString convierte el número decimal a una cadena que representa el equivalente a un número hexadecimal

Caso particular de uso: con cuadro de diálogo
---------------------------------------------

JOptionPane: crea un cuadro de diálogo visual para ingresar datos.

String numeroStr = JOptionPane.showInputDialog(null, "Ingrese un número entero");
int numeroDecimal = 0;
try {
	numeroDecimal = Integer.parseInt(numeroStr);
} catch (NumberFormatException e){
	JOptionPane.showMessageDialog(null, "Error debe ingresar un número entero");
	main(args);
	System.exit(0);
}

System.out.println("numeroDecimal = " + numeroDecimal);

Caso particular de uso: en consola
----------------------------------

Scanner: clase para recepción de data desde consola.

Scanner scanner = new Scanner(System.in);
System.out.println("Ingrese un número entero:");
// String numeroStr = scanner.nextLine();
int numeroDecimal = 0;
try {
	numeroDecimal = scanner.nextInt();// Integer.parseInt(numeroStr);
} catch (InputMismatchException e){
	System.out.println("Error debe ingresar un número entero!");
	main(args);
	System.exit(0);
}

System.out.println("numeroDecimal = " + numeroDecimal);

Conversión de tipos de dato
---------------------------

Conversión por envolvimiento de data (wrappers):

// de cadena a tipos numéricos y booleano

String numeroStr = "50";

int numeroInt = Integer.parseInt(numeroStr);
System.out.println("numeroInt = " + numeroInt);

String realStr = "98765.43e-3";
double realDouble = Double.parseDouble(realStr);
System.out.println("realDouble = " + realDouble);

String logicoStr = "TruE";
boolean logicoBoolean = Boolean.parseBoolean(logicoStr); // siempre devuelve true
System.out.println("logicoBoolean = " + logicoBoolean);

// de tipos numéricos a cadena

int otroNumeroInt = 100;

System.out.println("otroNumeroInt = " + otroNumeroInt);

String otroNumeroStr = Integer.toString(otroNumeroInt);
System.out.println("otroNumeroStr = " + otroNumeroStr);

otroNumeroStr = String.valueOf(otroNumeroInt+10);
System.out.println("otroNumeroStr = " + otroNumeroStr);

double otroRealDouble = 1.23456e2;
String otroRealStr = Double.toString(otroRealDouble);
System.out.println("otroRealStr = " + otroRealStr);

otroRealStr = String.valueOf(1.23456e2f);
System.out.println("otroRealStr = " + otroRealStr);

Casting - conversión entre tipos primitivos:

int i = 22768;
short s = (short) i;
System.out.println("s = " + s);
long l = i;
System.out.println("l = " + l);
System.out.println(Short.MAX_VALUE);
char b = (char) i;
System.out.println("b = " + b);
float f = (float) i;
System.out.println("f = " + f);


Datos tipo String y sus utilidades
----------------------------------

# Comparación de cadenas

String curso = "Programación Java"; // arreglo de cadena
String curso2 = new String("Programación Java"); // instancia de string

boolean esIgual = curso == curso2;
System.out.println("curso == curso2 = " + esIgual); // false

esIgual = curso.equals(curso2); // equals compara valores de cadena, sea de una cadena primitiva o de un objeto tipo String
System.out.println("curso.equals(curso2) = " + esIgual); // true

String curso3 = "Programación Java";
esIgual = curso == curso3; // compara dos cadenas
System.out.println("curso == curso3 = " + esIgual); // true

String curso4 = "programación java";
esIgual = curso.equalsIgnoreCase(curso4); // ignora la distinción entre mayúsculas/minúsculas
System.out.println("curso == curso4 = " + esIgual); // true

# Concatenación

String curso = "Programación Java";
String profesor = "Andrés Guzmán";

// con símbolo "+"

String detalle = curso + " con el instructor " + profesor;
System.out.println(detalle);

int numeroA = 10;
int numeroB = 5;

System.out.println(detalle + (numeroA + numeroB));
System.out.println(numeroA + numeroB + detalle);

// con el operador "concat"

String detalle2 = curso.concat(" con ").concat(profesor);
System.out.println("detalle2 = " + detalle2);

# Ubicación de caracteres y subcadenas

String archivo = "alguna.imagen.pdf";
int i = archivo.lastIndexOf(".");
System.out.println("archivo.length() = " + archivo.length()); // 17 caracteres
System.out.println("archivo.substring(archivo.length()-4) = " + archivo.substring(i+1)); // quito 14 caracteres: pdf


# Inmutabilidad

String curso = "Programación Java";
String profesor = "Andrés Guzmán";

String resultado = curso.concat(profesor); // genera un nuevo resultado para cumplir con la inmutabilidad
System.out.println("curso = " + curso);
System.out.println("resultado = " + resultado);
System.out.println(curso == resultado); // false

String resultado2 = curso.transform(c -> {
	return c + " con " + profesor;
}); // c representa al objeto curso, transform mantiene la inmutabilidad

System.out.println("curso = " + curso);
System.out.println("resultado2 = " + resultado2);

String resultado3 = resultado.replace("a", "A"); // reemplaza "a" por "A"

System.out.println("resultado = " + resultado);
System.out.println("resultado3 = " + resultado3);


# Validaciones de contenido de cadenas

String curso = null;

boolean esNulo = curso == null;

System.out.println("esNulo = " + esNulo);

if(esNulo) {
	curso = "Programación Java";
}

boolean esVacio = curso.length() == 0;

System.out.println("esVacio = " + esVacio);

boolean esVacio2 = curso.isEmpty(); // equivale a (curso.length() == 0)
System.out.println("esVacio2 = " + esVacio2);

boolean esBlanco = curso.isBlank(); // equivale a curso == " "
System.out.println("esBlanco = " + esBlanco);

if(esBlanco == false) {
	System.out.println(curso.toUpperCase());
	System.out.println("Bienvenido al curso ".concat(curso));
}


# Métodos de objeto tipo String importantes

String nombre = "Andres";

System.out.println("nombre.length() = " + nombre.length()); // longitud del String (es tratado como un array)
System.out.println("nombre.toUpperCase() = " + nombre.toUpperCase()); // transforma a mayúsculas
System.out.println("nombre.toLowerCase() = " + nombre.toLowerCase()); // transforma a minúsculas
System.out.println("nombre.equals(\"Andres\") = " + nombre.equals("Andres")); // la cadena es igual al parámetro "Andres", true
System.out.println("nombre.equals(\"andres\") = " + nombre.equals("andres")); // false
System.out.println("nombre.equalsIgnoreCase(\"andres\") = " + nombre.equalsIgnoreCase("andres")); // compara sin tener en cuenta mayúsculas o minúsculas
System.out.println("nombre.compareTo(\"Andres\") = " + nombre.compareTo("Andres")); // compara lexicográficamente el valor del String con la cadena que viene como parámetro. Devuelve un entero. En este caso, devuelve cero.
System.out.println("nombre.compareTo(\"Aaron\") = " + nombre.compareTo("Aaron")); // devuelve 13
System.out.println("nombre.charAt(0) = " + nombre.charAt(0)); // posición del caracter en 0. Devuelve un caracter, en este caso A
System.out.println("nombre.charAt(1) = " + nombre.charAt(1)); // posición del caracter en 1. Devuelve un caracter, en este caso n
System.out.println("nombre.charAt(nombre.length()-1) = " + nombre.charAt(nombre.length()-1)); // devuelve s

System.out.println("nombre.substring(1) = " + nombre.substring(1)); // subcadena. Devuelve "ndres"
System.out.println("nombre.substring(1, 4) = " + nombre.substring(1, 4)); // subcadena. Devuelve "ndr"
System.out.println("nombre.substring(nombre.length()-2) = " + nombre.substring(nombre.length()-2)); // devuelve "es"

String trabalenguas = "trabalenguas";
System.out.println("trabalenguas = " + trabalenguas.replace("a", ".")); // reemplaza "a" por ".". Devuelve "tr.b.lengu.s"
System.out.println("trabalenguas = " + trabalenguas);
System.out.println("trabalenguas.indexOf('a') = " + trabalenguas.indexOf('a')); // devuelve la posición (desde cero) del primer caracter indicado, en este caso 2
System.out.println("trabalenguas.lastIndexOf('a') = " + trabalenguas.lastIndexOf('a')); // devuelve la posición (desde cero) del último caracter indicado, en este caso 10
System.out.println("trabalenguas.indexOf('t') = " + trabalenguas.indexOf("lenguas")); // devuelve la posición de la primera ocurrencia del caracter presentado, en este caso 0
System.out.println("trabalenguas.contains('t') = " + trabalenguas.contains("lenguas")); // consulta si la cadena incluye el caracter señalado, devuelve true
System.out.println("trabalenguas.startsWith(\"tr\") = " + trabalenguas.startsWith("tr")); // consulta si la cadena comienza con el caracter indicado en el parámetro, devuelve true
System.out.println("trabalenguas.endsWith(\"s\") = " + trabalenguas.endsWith("s")); // consulta si la cadena termina con el caracter indicado en el parámetro, devuelve true
System.out.println("  trabalenguas ");
System.out.println("  trabalenguas ".trim()); // corta espacios en blanco, devuelve "trabalenguas" (sin espacios)


# Convertir un String en un arreglo de caracteres

String trabalenguas = "trabalenguas";
System.out.println("trabalenguas.length() = " + trabalenguas.length());
System.out.println("trabalenguas.toCharArray() = " + trabalenguas.toCharArray()); // convierte a un arreglo de caracteres

char[] arreglo = trabalenguas.toCharArray();
int largo = arreglo.length;
System.out.println("largo = " + largo);
for(int i = 0; i < largo; i++){
	System.out.print(arreglo[i]);
}
System.out.println();
System.out.println("\ntrabalenguas = " + trabalenguas.split("a"));

String[] arreglo2 = trabalenguas.split("a"); // genera un arreglo de cadenas separados por un caracter específico en el String
int l = arreglo2.length;
for(int j=0; j<l; j++){
	System.out.println(arreglo2[j]);
}

String archivo = "alguna.imagen.jsf";
String[] archivoArr = archivo.split("\\."); // [.]
l = archivoArr.length;
System.out.println("l = " + l);
for(int j=0; j < l; j++){
	System.out.println(archivoArr[j]);
}
System.out.println("extension = " + archivoArr[l-1]);


Operadores en Java
------------------

# Aritméticos

int i = 5, j = 4, suma = i + j;

System.out.println("suma = " + suma);

// las 4 operaciones elementales:

System.out.println("i + j = " + (i + j));

int resta = i - j;
System.out.println("resta = " + resta);
System.out.println("(i - j) = " + (i - j));

int multi = i * j;
System.out.println("multiplicación = " + multi);

int div = i / j;
float div2 = (float) i / (float)j;
System.out.println("div = " + div);
System.out.println("div2 = " + div2);

// operador módulo:

int resto = i % j;
System.out.println("resto = " + resto); 

resto = 8 % 5;
System.out.println("resto = " + resto);

int numero = Integer.parseInt(JOptionPane.showInputDialog("ingrese un numero"));
if(numero % 2 == 0){
	System.out.println("numero par = " + numero);
} else {
	System.out.println("numero impar = " + numero);
}

# Incremental/decremental

// Pre incremento
int i = 1;
int j = ++i; // i = i + 1

System.out.println("i = " + i);
System.out.println("j = " + j);

// Post incremento
i = 2;
System.out.println("inicial de i = " + i);
j = i++;
System.out.println("i = " + i);
System.out.println("j = " + j);

// Pre decremento
i = 3;
j = --i; // i = i - 1 = 2
System.out.println("i = " + i);
System.out.println("j = " + j);

// Post decremento
i = 4;
j = i--;
System.out.println("i = " + i);
System.out.println("j = " + j);

System.out.println("j = " + (++j));
System.out.println("j = " + (j++));
System.out.println("j = " + j);

// Operadores PRE: incrementan o decrementan, luego devuelven el nuevo valor para asignarlo a la variable
// Operadores POST: asignan el valor actual a una variable y luego incrementan o decrementan el valor de esa variable


# Asignación

// Se basan en el POST incremento/decremento

int i = 5;
int j = i + 4;
System.out.println("i = " + i);
System.out.println("j = " + j);

i += 2; // i = i + 2
System.out.println("i = " + i);

i += 5; // i = i + 5
System.out.println("i = " + i);

j -= 4; // j = j - 4
System.out.println("j = " + j);

j *= 3; // j = j * 3;
System.out.println("j = " + j);

# Operador instanceof

String texto = "Creando un objeto de la clase String ... que tal!";

Integer num = 7;

Boolean b1 = texto instanceof String;

System.out.println("texto es del tipo String = " + b1);

b1 = texto instanceof Object;
System.out.println("texto es del tipo Object = " + b1);

b1 = num instanceof Integer;
System.out.println("num es del tipo Integer = " + b1);

b1 = num instanceof Number;
System.out.println("num es del tipo Number = " + b1);

b1 = num instanceof Object;
System.out.println("num es del tipo Object = " + b1);

Double decimal = 45.54;
b1 = decimal instanceof Number;
System.out.println("decimal es del tipo Number = " + b1);

b1 = b1 instanceof Boolean;
System.out.println("b1 es del tipo Boolean = " + b1);

// Puede notarse que solo aplica a clases wrapper de los tipos primitivos, no a las definiciones de variables con tipo primitivo (e.g. int numero = 5)


Control de flujo de programa
----------------------------

# Condicionales if-else y switch:

// if-else

float promedio = 5.5f;

if(promedio >= 6.5) {
	System.out.println("Felicitaciones, excelente promedio!");
} else if(promedio >= 6.0){
	System.out.println("Muy buen promedio!");
} else if(promedio >= 5.5){
	System.out.println("Buen promedio!");
} else if(promedio >= 5.0){
	System.out.println("Regular, necesitas esforzarte un poco más!");
} else if(promedio >= 4.0){
	System.out.println("Insuficiente, necesitas estudiar más!");
} else {
	System.out.println("Reprobado!");
}

System.out.println("tu promedio es " + promedio);

// switch

Scanner s = new Scanner(System.in);
System.out.println("Ingrese el número del mes entre 1 - 12:");
int mes = s.nextInt();
String nombreMes = null;

switch(mes){

	case 1:
		nombreMes = "Enero";
		break;
	case 2:
		nombreMes = "Febrero";
		break;
	case 3:
		nombreMes = "Marzo";
		break;
	case 4:
		nombreMes = "Abril";
		break;
	case 5:
		nombreMes = "Mayo";
		break;
	case 6:
		nombreMes = "Junio";
		break;
	case 7:
		nombreMes = "Julio";
		break;
	case 8:
		nombreMes = "Agosto";
		break;
	case 9:
		nombreMes = "Septiembre";
		break;
	case 10:
		nombreMes = "Octubre";
		break;
	case 11:
		nombreMes = "Noviembre";
		break;
	case 12:
		nombreMes = "Diciembre";
		break;
	default:
		nombreMes = "Indefinido";
}

System.out.println("nombreMes = " + nombreMes);


# Bucles for, for-each, while, do-while

// for
for(int i = 0; i <= 10; i++) {
	System.out.println("i = " + i);
}

// for-each
int[] numeros = {1, 3, 5, 7, 9, 11, 13, 15};
for(int num: numeros){
	System.out.println("num = " + num);
}

// while
int i = 0;
while(i <= 5){
	System.out.println("i = " + i);
	i++;
}

// do-while
prueba = false;
do {
	System.out.println("se ejecuta al menos una vez");
} while (prueba);

// bucles con etiquetas
bucle:
for (int i = 1; i <= 7; i++) {
	int j = 1;
	while ( j <= 8) {
		if (i == 6 || i == 7) {
			System.out.println("Dia " + i + ": descanso de fin de semana!");
			continue bucle;
		}
		System.out.println("Día " + i + ", trabajando a las " + j + "hrs. ");
		j++;
	}
}

Manejo de wrappers
------------------

# Autoboxing

Integer[] enteros = {Integer.valueOf(1), 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15};

int suma = 0;

for(Integer i: enteros){
	if(i.intValue() % 2 == 0){ // o también if(i % 2 == 0)
		suma += i.intValue();
	}
}
System.out.println("suma = " + suma);


# Método getClass

String texto = "Hola que tal!";

// permite explorar las propiedades del objeto
Class strClass = texto.getClass();

// obtiene los valores de la clase a la que pertenece el objeto
System.out.println("strClass.getName() = " + strClass.getName()); // strClass.getName() = java.lang.String
System.out.println("strClass.getSimpleName() = " + strClass.getSimpleName()); // strClass.getSimpleName() = String
System.out.println("strClass.getPackageName() = " + strClass.getPackageName()); // strClass.getPackageName() = java.lang
System.out.println("strClass = " + strClass); // strClass = class java.lang.String

for(Method metodo: strClass.getMethods()){ // todos los métodos (se repiten algunos por ser sobrecargados)
	System.out.println("metodo.getName() = " + metodo.getName());
}

// aplica para otros wrappers también
Integer num = 34;
// también se puede obtener info de las clases padres de la clase a la que el objeto pertenece
Class intClass = num.getClass(); // intClass.getSuperclass().getSuperclass() = class java.lang.Number
Class objClass = intClass.getSuperclass().getSuperclass(); // intClass.getSuperclass().getSuperclass() = class java.lang.Object
System.out.println("intClass.getSuperclass().getSuperclass() = " + intClass.getSuperclass());
System.out.println("intClass.getSuperclass().getSuperclass() = " + objClass);

for(Method metodo: objClass.getMethods()){
	System.out.println("metodo.getName() = " + metodo.getName());
}

Paso de valores
---------------

# Pasar por valor

public class PasarPorValor {
    public static void main(String[] args) {

        int i = 10;

        System.out.println("iniciamos el método main con i = " + i);
        test(i);
        System.out.println("Finaliza el método main con el valor de i (se mantiene igual) = " + i);
    }

    public static void test(int i){
        System.out.println("Iniciamos el método test con i = " + i);
        i = 35;
        System.out.println("Finaliza el método test con i = " + i);
    }
}

# Pasar por referencia

public class PasarPorReferencia {
    public static void main(String[] args) {

        int[] edad = {10, 11, 12};

        System.out.println("iniciamos el método main");
        for(int i = 0; i < edad.length; i++){
            System.out.println("edad[i] = " + edad[i]);
        }
        System.out.println("Antes de llamar al método test");
        test(edad);
        System.out.println("Después de llamar al método test");
        for(int i = 0; i < edad.length; i++){
            System.out.println("edad[i] = " + edad[i]);
        }

        System.out.println("Finaliza el método main con los datos del arreglo modificados!");
    }

    public static void test(int[] edadArr){
        System.out.println("Iniciamos el método test");
        for(int i = 0; i < edadArr.length; i++){
            edadArr[i] = edadArr[i] + 20;
        }
        System.out.println("Finaliza el método test");
    }
}

# Caso particular de paso por referencia: con objetos

class Persona {
    private String nombre;

    public void modificarNombre(String nuevoNombre){
        this.nombre = nuevoNombre;
    }

    public String leerNombre(){
        return this.nombre;
    }
}
public class PasarPorReferencia2 {
    public static void main(String[] args) {

        Persona persona = new Persona();
        persona.modificarNombre("Andrés");

        System.out.println("iniciamos el método main");

        System.out.println("persona.nombre = " + persona.leerNombre());
        System.out.println("Antes de llamar al método test");
        test(persona);
        System.out.println("Después de llamar al método test");

        System.out.println("persona.nombre = " + persona.leerNombre());

        System.out.println("Finaliza el método main con los datos de la persona modificados!");
    }

    public static void test(Persona persona){
        System.out.println("Iniciamos el método test");
        persona.modificarNombre("Pepe");
        System.out.println("Finaliza el método test");
    }
}

Utilitarios Fecha y Calendario
------------------------------

# Fecha

Date fecha = new Date();

System.out.println("fecha = " + fecha);

SimpleDateFormat df = new SimpleDateFormat("EEEE dd 'de' MMMM, yyyy");
String fechaStr = df.format(fecha);

long j = 0;
for(int i = 0; i < 100000000; i++){
	j +=i;
}
System.out.println("j = " + j);

Date fecha2 = new Date();
long tiempoFinal = fecha2.getTime() - fecha.getTime();
System.out.println("Tiempo transcurrido en el for = " + tiempoFinal);
System.out.println("fechaStr = " + fechaStr);

# Calendario

Calendar calendario = Calendar.getInstance(); // genera un valor de calendario de la fecha actual

// ajusta una fecha personalizada
//calendario.set(2019, Calendar.SEPTEMBER, 25, 18, 20, 10);
calendario.set(Calendar.YEAR, 2020);
calendario.set(Calendar.MONTH, Calendar.MARCH);
calendario.set(Calendar.DAY_OF_MONTH, 25);

//calendario.set(Calendar.HOUR_OF_DAY, 21);
calendario.set(Calendar.HOUR, 7);
calendario.set(Calendar.AM_PM, Calendar.PM);
calendario.set(Calendar.MINUTE, 20);
calendario.set(Calendar.SECOND, 10);
calendario.set(Calendar.MILLISECOND, 125);

Date fecha = calendario.getTime();
System.out.println("fecha sin formato = " + fecha);

SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS a");
String fechaConFormato = formato.format(fecha);
System.out.println("fecha Con Formato = " + fechaConFormato);

Calendar calActual = Calendar.getInstance();
Date fecha2 = calActual.getTime();

if(fecha.after(fecha2)){
	System.out.println("fecha1 (del usuario) es después que fecha2 (actual)");
} else if(fecha.before(fecha2)){
	System.out.println("fecha es anterior que fecha2");
} else if(fecha.equals(fecha2)){
	System.out.println("fecha es igual a fecha2");
}

if(fecha.compareTo(fecha2) > 0){
	System.out.println("fecha1 (del usuario) es después que fecha2 (actual)");
} else if(fecha.compareTo(fecha2) < 0){
	System.out.println("fecha es anterior que fecha2");
} else if(fecha.compareTo(fecha2) == 0){
	System.out.println("fecha es igual a fecha2");
}

# Parseo de cadena a fecha

Scanner s = new Scanner(System.in);
SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

System.out.println("Ingrese una fecha con formato 'yyyy-MM-dd'");
try {
	Date fecha = format.parse(s.next());
	System.out.println("fecha = " + fecha);
	System.out.println("format = " + format.format(fecha));
	
	Date fecha2 = new Date();
	System.out.println("fecha2 = " + fecha2);

	if(fecha.after(fecha2)){
		System.out.println("fecha1 (del usuario) es después que fecha2 (actual)");
	} else if(fecha.before(fecha2)){
		System.out.println("fecha es anterior que fecha2");
	} else if(fecha.equals(fecha2)){
		System.out.println("fecha es igual a fecha2");
	}

	if(fecha.compareTo(fecha2) > 0){
		System.out.println("fecha1 (del usuario) es después que fecha2 (actual)");
	} else if(fecha.compareTo(fecha2) < 0){
		System.out.println("fecha es anterior que fecha2");
	} else if(fecha.compareTo(fecha2) == 0){
		System.out.println("fecha es igual a fecha2");
	}

	
} catch (ParseException e) {
	//e.printStackTrace();
	System.err.println("La fecha tiene un formato incorrecto: " + e.getMessage());
	System.err.println("El formato debe ser 'yyyy-MM-dd'");
	System.exit(1);
	//main(args);
}


Propiedades del sistema
-----------------------

# Acceso a propiedades del sistema

String username = System.getProperty("user.name");
System.out.println("username = " + username);

String home = System.getProperty("user.home");
System.out.println("home = " + home);

String workspace = System.getProperty("user.dir");
System.out.println("workspace = " + workspace);

String java = System.getProperty("java.version");
System.out.println("java = " + java);

String lineSeparator = System.getProperty("line.separator");
String lineSeparator2 = System.lineSeparator();
System.out.println("lineSeparator:" + lineSeparator2 + "Una línea nueva ...");

Properties p = System.getProperties();
p.list(System.out);

# Propiedades personalizadas

try {
	FileInputStream archivo = new FileInputStream("src/config.properties");

	Properties p = new Properties(System.getProperties());
	p.load(archivo);
	p.setProperty("mi.propiedad.personalizada","Mi valor guardado en el objeto properties");
	System.setProperties(p);

	Properties ps = System.getProperties();
	System.out.println("ps.getProperty(...) = " + ps.getProperty("mi.propiedad.personalizada"));
	System.out.println(System.getProperty("config.puerto.servidor"));
	System.out.println(System.getProperty("config.autor.nombre"));
	System.out.println(System.getProperty("config.autor.email"));

	ps.list(System.out);
} catch(Exception e){
	System.err.println("no existe el archivo = " + e);
	System.exit(1);
}

Clase Math
----------

# Utilidades

int absoluto = Math.abs(-3);
System.out.println("absoluto = " + absoluto);

absoluto = Math.abs(3);
System.out.println("absoluto = " + absoluto);

double max = Math.max(3.5, 1.2);
System.out.println("max = " + max);

double min = Math.min(3.5, 1.2);
System.out.println("min = " + min);

double techo = Math.ceil(3.5);
System.out.println("techo = " + techo);

double piso = Math.floor(3.5);
System.out.println("piso = " + piso);

long entero = Math.round(Math.PI);
System.out.println("entero = " + entero);

double exp = Math.exp(1);
System.out.println("exp = " + exp);

double log = Math.log(10);
System.out.println("log = " + log);

double potencia = Math.pow(10, 3);
System.out.println("potencia = " + potencia);

double raiz = Math.sqrt(5);
System.out.println("raiz = " + raiz);

double grados = Math.toDegrees(1.57);
grados = Math.round(grados);
System.out.println("convertir de radianes a grados = " + grados);

double radianes = Math.toRadians(90.00);
System.out.println("convertir de grados a radianes = " + radianes);

System.out.println("sin(90): " + Math.sin(radianes));
System.out.println("cos(90): " + Math.cos(radianes));

radianes = Math.toRadians(180.00);
System.out.println("cos(180): " + Math.cos(radianes));

radianes = Math.toRadians(0.00);
System.out.println("cos(0): " + Math.cos(radianes));


# Aleatorización (Random)

String[] colores = {"azul", "amarillo", "rojo", "verde", "blanco", "negro"};

double random = Math.random();
System.out.println("random = " + random);
random *= colores.length;

System.out.println("random = " + random);

random = Math.floor(random);
System.out.println("random = " + random);

System.out.println("colores = " + colores[(int) random]);

Random randomObj = new Random();
int randomInt = 15 + randomObj.nextInt(25-15+1);
System.out.println("randomInt = " + randomInt);

randomInt = randomObj.nextInt(colores.length);
System.out.println("randomInt = " + randomInt);
System.out.println("colores = " + colores[randomInt]);


Argumentos de la aplicación
---------------------------

# Leer argumentos

if(args.length == 0){
	System.out.println("Debe ingresar argumentos o parámetros!");
	System.exit(-1);
}
for(int i = 0; i < args.length; i++){
	System.out.println("Argumentos nº " + i + ": " + args[i]);
}

# Ejemplo de interacción por consola

public class ArgumentosLineaComandoCalculadora {
    public static void main(String[] args) {
        if(args.length != 3){
            System.err.println("Por favor ingresar una operación " +
                    "(suma, resta, div o multi) y dos enteros");
            System.exit(-1);
        }

        String operacion = args[0];
        int a = 0;
        int b = 0;
        double resultado = 0.00;

        try {
            a = Integer.parseInt(args[1]);
            b = Integer.parseInt(args[2]);
        } catch (NumberFormatException e){
            System.err.println("Cuidado a y b deben ser enteros, vuelva a intentar!");
            System.exit(-1);
        }
        switch(operacion){
            case "suma":
                resultado = a+b;
                break;
            case "resta":
                resultado = a-b;
                break;
            case "multi":
                resultado = a*b;
                break;
            case "div":
                if(b == 0){
                    System.err.println("No se puede dividir por zero!");
                    System.exit(-1);
                }
                resultado = (double)a/b;
                break;
            default:
                resultado = a+b;
        }

        System.out.println("Resultado de la operación '" + operacion + "' es: " +resultado);
    }
}


















