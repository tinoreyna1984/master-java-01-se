Java - Tipos y Métodos Genéricos (Java SE 5+)
*********************************************

Introducción a las listas en Java
=================================
Las listas son una estructura de datos que permite almacenar y manipular una colección ordenada de elementos. Una lista es similar a un arreglo, pero a diferencia de este, una lista puede crecer o disminuir de tamaño dinámicamente a medida que se agregan o eliminan elementos.

Java proporciona una interfaz llamada List que define las operaciones comunes que se pueden realizar en una lista, como agregar elementos, eliminar elementos, acceder a elementos en una posición específica, buscar elementos, etc. Algunas implementaciones populares de la interfaz List en Java son ArrayList, LinkedList y Vector.

* ArrayList: Es una implementación de lista basada en arreglos dinámicos. Proporciona un acceso rápido a los elementos en función de su índice, pero puede ser lento para agregar o eliminar elementos en posiciones intermedias, ya que puede requerir el desplazamiento de los elementos adyacentes.
* LinkedList: Es una implementación de lista doblemente enlazada. Proporciona un acceso rápido para agregar o eliminar elementos en posiciones intermedias, pero puede ser más lenta para acceder a elementos en función de su índice.
* Vector: Es una implementación similar a ArrayList, pero con métodos sincronizados, lo que la hace segura para su uso en entornos de subprocesos múltiples.

Para utilizar listas en Java, primero debes importar la clase o interfaz relevante del paquete java.util. A continuación, puedes crear una instancia de una implementación de lista específica y utilizar sus métodos para trabajar con los elementos de la lista.

Ejemplo:

import java.util.ArrayList;
import java.util.List;

public class EjemploLista {
    public static void main(String[] args) {
        List<String> lista = new ArrayList<>();

        lista.add("elemento1");
        lista.add("elemento2");
        lista.add("elemento3");

        System.out.println(lista);  // Imprime: [elemento1, elemento2, elemento3]
    }
}

Métodos genéricos
=================

// primera implementación: convierte un arreglo de cualquier tipo en una lista de tipo genérico
public static <T> List<T> fromArrayToList(T[] c){
	return Arrays.asList(c);
}

// segunda implementación: el primer parámetro es convertido de array a lista y el segundo es presentado por cada elemento del arreglo como un genérico tipo G
public static <T, G> List<T> fromArrayToList(T[] c, G[] x){
	for(G elemento: x){
		System.out.println(elemento);
	}
	return Arrays.asList(c);
}

// Se declaran dos arreglos de diferentes tipos
Cliente[] clientesArreglo = {new Cliente("Luci", "Martínez"),
		new Cliente("Andres", "Guzmán")};
Integer[] enterosArreglo = {1,2,3};

// Convierte a List según el tipo de elemento que se quiere registrar
List<Cliente> clientesLista = fromArrayToList(clientesArreglo);
List<Integer> enterosLista = fromArrayToList(enterosArreglo);

// recorre cade elemento para imprimir en consola (método de instancias del tipo List)
clientesLista.forEach(System.out::println);
enterosLista.forEach(System.out::println);

// uso segunda definición del método fromArrayToList
List<String> nombres = fromArrayToList(new String[]{"Andrés", "Pepe",
"Luci", "Bea", "John"}, enterosArreglo);
nombres.forEach(System.out::println);


Genéricos con límites
=====================

Considerar los siguientes métodos:

// genérico con un límite: T debe ser del tipo Number o de una subclase de Number
public static <T extends Number> List<T> fromArrayToList(T[] c){
	return Arrays.asList(c);
}

// genérico con más de un límite: T debe ser del tipo Number y debe implementar la interfaz Comparable<T>
public static <T extends Cliente & Comparable<T>> List<T> fromArrayToList(T[] c){
	return Arrays.asList(c);
}

El primer método, fromArrayToList, es un método genérico en Java que toma un array de elementos de tipo T, que extiende la clase Number, y devuelve una lista de elementos del mismo tipo T. El uso de <T extends Number> en la declaración del método indica que T debe ser una subclase de Number o la propia clase Number.

Dentro del método, se utiliza el método estático asList de la clase Arrays para convertir el array en una lista. El método asList toma un array y devuelve una lista respaldada por ese array. En este caso, el array c se pasa como argumento al método asList, que devuelve una lista de elementos del tipo T.

El segundo método, también llamado fromArrayToList, es otro método genérico en Java. Sin embargo, en este caso, T debe ser una subclase de la clase Cliente y también debe implementar la interfaz Comparable<T>. La cláusula & se utiliza para indicar múltiples límites para el tipo genérico.

El uso de <T extends Cliente & Comparable<T>> en la declaración del método establece estos requisitos para el tipo T. Esto significa que T debe ser una subclase de Cliente y también debe implementar la interfaz Comparable<T>, lo que permite la comparación entre objetos de tipo T.

Al igual que en el primer método, se utiliza el método asList de la clase Arrays para convertir el array en una lista y se devuelve esa lista de elementos del tipo T.

En resumen, ambos métodos son métodos genéricos en Java que convierten un array en una lista. El primer método requiere que los elementos del array sean subclases de Number, mientras que el segundo método requiere que los elementos sean subclases de Cliente e implementen la interfaz Comparable<T>.


Genéricos con comodines (wildcards)
===================================

imprimirClientes(clientes);
imprimirClientes(clientesLista);
imprimirClientes(clientesPremiumList);
		
public static void imprimirClientes(List<? extends Cliente> clientes){
	clientes.forEach(System.out::println);
}

El comodín o wildcard representado por el caracter "?" significa que la clase tipo que recibe la lista puede ser del tipo Cliente o de subtipos de Cliente.


Caso de implementación de Comparable<T>
=======================================

System.out.println("Máximo de 1, 9 y 4 es: " + maximo(1, 9, 4));
System.out.println("Máximo de 3.9, 11.6, 7.78 es: " + maximo(3.9, 11.6, 7.78));
System.out.println("Máximo de zanahoria, arándanos, manzana es: "
		+ maximo("zanahoria", "arándanos", "manzana"));

public static <T extends Comparable<T>> T maximo(T a, T b, T c){
	T max = a;
	if(b.compareTo(max) > 0){
		max = b;
	}
	if(c.compareTo(max) > 0){
		max = c;
	}
	return max;
}

Aquí el método genérico "maximo" recibe como clases los tipos que puedan implementar Comparable. El método retorna el mayor de tres objetos independientemente del tipo en que son definidos.

Clases genéricas
================

Aquí un ejemplo de clase genéricas:

package org.aguzman.genericsclass;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Camion<T> implements Iterable<T> {

    private List<T> objetos;
    private int max;

    public Camion(int max) {
        this.max = max;
        this.objetos = new ArrayList<>();
    }

    public void add(T objeto){
        if(this.objetos.size() <= max) {
            this.objetos.add(objeto);
        } else {
            throw new RuntimeException("no hay más espacio.");
        }
    }

    @Override
    public Iterator<T> iterator() {
        return this.objetos.iterator();
    }
}

Y un ejemplo de su uso:

package org.aguzman.genericsclass;

public class EjemploGenericos {
    public static <T> void imprimirCamion(Camion<T> camion){
        for(T a: camion){
            if(a instanceof Animal) {
                System.out.println(((Animal)a).getNombre() + " tipo: " + ((Animal)a).getTipo());
            }
            else if(a instanceof Automovil){
                System.out.println(((Automovil)a).getMarca());
            } else if(a instanceof Maquinaria){
                System.out.println(((Maquinaria)a).getTipo());
            }
        }
    }
    public static void main(String[] args) {

        Camion<Animal> transporteCaballos = new Camion<>(5);
        transporteCaballos.add(new Animal("Peregrino", "Caballo"));
        transporteCaballos.add(new Animal("grillo", "Caballo"));
        transporteCaballos.add(new Animal("Tunquen", "Caballo"));
        transporteCaballos.add(new Animal("Topocalma", "Caballo"));
        transporteCaballos.add(new Animal("Longotoma", "Caballo"));

        imprimirCamion(transporteCaballos);

        Camion<Maquinaria> transMaquinas = new Camion<>(3);
        transMaquinas.add(new Maquinaria("Bulldozer"));
        transMaquinas.add(new Maquinaria("Grúa Horquilla"));
        transMaquinas.add(new Maquinaria("Perforadora"));

        imprimirCamion(transMaquinas);

        Camion<Automovil> transAuto = new Camion<>(3);
        transAuto.add(new Automovil("Toyota"));
        transAuto.add(new Automovil("Mitsubishi"));
        transAuto.add(new Automovil("Chevrolet"));

        imprimirCamion(transAuto);
    }
}

Camion es una clase que puede coleccionar diversos tipos de objetos al ser genérica. Implementa, para ello, la interfaz Iterable.

El programa main aprovecha esta clase para agrupar elementos de tipos Animal, Maquinaria y Automovil.

















