Java + Spring Boot
******************

Instalación previa
==================

JDK v17 (estable).

Netbeans:

Emplear la ruta del JDK instalado previamente:

Ej.: C:\Program Files\Java\jdk-17.0.4.1

Fijar variable de entorno JAVA_HOME=C:\Program Files\Java\jdk-17.0.4.1

Modo oscuro Netbeans (Darcula):


Hola Mundo con Spring - Initializr
==================================

Crear a través de Initializr: https://start.spring.io/

Dejar los datos por defecto, salvo los siguientes:

Grupo: cualquier nombre (p. ej. mx.com.gm)

Dependencias básicas a agregar:

Spring Boot DevTools
Lombok
Spring Web
Thymeleaf

Abrir Netbeans -> Open Project

Hola Mundo con Spring - Netbeans
================================

Configurar Netbeans:

Descargar NB Springboot
Tools -> Plugins -> Downloaded -> Add Plugins -> Instalar

Crear proyecto:

New Project -> Java with Maven -> Spring Boot Initializr project

Configurar de la misma forma que en Initializr.

Verificar dependencias y construir:

Click derecho en el proyecto -> Clean and build

Verificar el mensaje "BUILD SUCCESS" al finalizar.

En Source Packages, encontramos el paquete y el código fuente inicial.


Crear controlador REST
======================

Crear nuevo archivo Java en el mismo paquete inicial.
Agregar la anotación @RestController encima de la definición de clase. Asegurarse que esa anotación importe import org.springframework.web.bind.annotation.RestController

En ese nuevo archivo, crear un método y agregar la anotación @GetMapping("/"), que significa que se visualizará al iniciar el sitio (localhost:8080):

package mx.com.gm;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ControladorInicio {
    
    @GetMapping("/")
    public String inicio(){
        return "Hola mundo con Spring";
    }
}


Para visualizar en log, agregar la anotación @Slf4j en la clase.

@RestController
@Slf4j
public class ControladorInicio {
    
    @GetMapping("/")
    public String inicio(){
        return "Hola mundo con Spring";
    }
}

Cambiar valores de ejecución: application.properties:

# Aqui se cambian valores de configuracion
server.port=9090


Spring MVC con Thymeleaf
========================

Para crear un proyecto similar a uno anterior:

Click derecho en el proyecto -> Copiar -> Establecer el nombre del nuevo proyecto
Renombrar el nuevo proyecto.
Cambiar la anotación RestController por Controller, eliminar el import anterior y emplear el import de Controller.

Crear página HTML en src/main/resources/templates: index.html

Para no guardar caché de Thymeleaf (application.properties):

# Aqui se cambian valores de configuracion
#server.port=9090
spring.thymeleaf.cache=false


Enviar información desde el controlador hacia la página
-------------------------------------------------------

En el controlador:

package mx.com.gm;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Slf4j
public class ControladorInicio {
    
    @GetMapping("/")
    public String inicio(Model model){
        var mensaje = "Hola mundo con Thymeleaf";
        log.info("Ejecutando controlador MVC");
        model.addAttribute("mensaje", mensaje);
        
        return "index";
    }
}

En el index.html:

<!DOCTYPE html>

<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Inicio</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <h1>Inicio</h1>
        <p th:text="${mensaje}"></p>
    </body>
</html>



Imprimir valor desde application.properties
-------------------------------------------

# Aqui se cambian valores de configuracion
#server.port=9090
spring.thymeleaf.cache=false
index.saludo=Mensaje desde application.properties

package mx.com.gm;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Slf4j
public class ControladorInicio {
    
    @Value("${index.saludo}")
    private String saludo;
    
    @GetMapping("/")
    public String inicio(Model model){
        var mensaje = "Hola mundo con Thymeleaf";
        log.info("Ejecutando controlador MVC");
        model.addAttribute("mensaje", mensaje);
        model.addAttribute("saludo", saludo);
        
        return "index";
    }
}

<!DOCTYPE html>

<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Inicio</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <h1>Inicio</h1>
        <p th:text="${mensaje}"></p>
        <p th:text="${saludo}"></p>
    </body>
</html>


Creación de un dominio
----------------------

Ej: dominio Persona

Click derecho en el paquete principal para crear nueva clase.
Se crea la clase Persona y se agrega un paquete de dominio: mx.com.gm.domain
Finalizar.


Desarrollar la clase:

package mx.com.gm.domain;

import lombok.Data;

@Data
public class Persona {
    private String nombre;
    private String apellido;
    private String email;
    private String telefono;
}

Al agregar la anotación Data, se crean los métodos get y set de la clase a partir de los métodos declarados, así como el método hashCode y toString.

En ControladorInicio.java, instanciar el dominio Persona:

import mx.com.gm.domain.Persona;

public class ControladorInicio {
    
    @Value("${index.saludo}")
    private String saludo;
    
    @GetMapping("/")
    public String inicio(Model model){
        // ...
        var mensaje = "Hola mundo con Thymeleaf";
        var persona = new Persona();
        persona.setNombre("Tino");
        persona.setApellido("Reyna");
        persona.setEmail("tino@mail.com");
        persona.setTelefono("0987654321");
        // ...
        model.addAttribute("persona", persona);
        
        return "index";
    }
}



En la vista:

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Inicio</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <h1>Inicio</h1>
        <p th:text="${mensaje}"></p>
        <p th:text="${saludo}"></p>
        <br/>
        Nombre: <span th:text="${persona.nombre}"></span><br/>
        Apellido: <span th:text="${persona.apellido}"></span><br/>
        Email: <span th:text="${persona.email}"></span><br/>
        Teléfono: <span th:text="${persona.telefono}"></span><br/>
    </body>
</html>


Trabajar con una lista de objetos de un dominio
-----------------------------------------------

En el controlador:

package mx.com.gm;

import java.util.Arrays;
import lombok.extern.slf4j.Slf4j;
import mx.com.gm.domain.Persona;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

/**
 *
 * @author Tino
 */
@Controller
@Slf4j
public class ControladorInicio {
    
    @Value("${index.saludo}")
    private String saludo;
    
    @GetMapping("/")
    public String inicio(Model model){
        
        var mensaje = "Hola mundo con Thymeleaf";
        
        var persona = new Persona();
        
        persona.setNombre("Tino");
        persona.setApellido("Reyna");
        persona.setEmail("tino@mail.com");
        persona.setTelefono("0987654321");
        
        var persona2 = new Persona(); // crear una instancia mas
        
        persona2.setNombre("Gaby");
        persona2.setApellido("Lorentzen");
        persona2.setEmail("gaby@mail.com");
        persona2.setTelefono("0998877665");
        
        var personas = Arrays.asList(persona, persona2); // crear un array
        
        log.info("Ejecutando controlador MVC");
        
        model.addAttribute("mensaje", mensaje);
        model.addAttribute("saludo", saludo);
        //model.addAttribute("persona", persona);
        model.addAttribute("personas", personas); // agregar array al modelo
        
        return "index";
    }
}

En la vista:

<!DOCTYPE html>

<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Inicio</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <h1>Inicio</h1>
        <p th:text="${mensaje}"></p>
        <p th:text="${saludo}"></p>
        <br/>
        <table border="1">
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Telefono</th>
            </tr>
            <tr th:each="persona: ${personas}">
                <td th:text="${persona.nombre}"></td>
                <td th:text="${persona.apellido}"></td>
                <td th:text="${persona.email}"></td>
                <td th:text="${persona.telefono}"></td>
            </tr>
        </table>
    </body>
</html>


Conexión a BBDD (MySQL)
-----------------------

(Se requiere crear la BBDD en MySQL)

Click en Services -> Click derecho en Databases -> escoger New Connection

Agregar el driver si nos lo piden

Modificar la cadena de conexión:
jdbc:mysql://localhost:3306/<esquema_BD>?zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false&useTimezone=true&serverTimezone=UTC

Click en Siguiente y actualizar nombre de conexión:

Crear un proyecto nuevo para realizar la conexión.

En ese nuevo proyecto, modificar el archivo pom.xml:
En el tag <dependencies>, click derecho en Insert Code -> Spring Boot Dependencies -> Escoger MySQL y Spring JPA
El resultado debe ser que se agregan los drivers al final del tag:
	 <dependency>
	  <groupId>mysql</groupId>
	  <artifactId>mysql-connector-java</artifactId>
	  <scope>runtime</scope>
	 </dependency>
	 <dependency>
	  <groupId>org.springframework.boot</groupId>
	  <artifactId>spring-boot-starter-data-jpa</artifactId>
	 </dependency>

Abrir application.properties. Agregar:

spring.datasource.url=jdbc:mysql://localhost:3306/test2?zeroDateTimeBehavior=convertToNull&useSSL=false&useTimezone=true&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
#spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

En este caso no se está empleando clave en la BBDD (está comentado el bloque del password).

Click derecho y escoger "Clean and Build". La salida debe ser la siguiente:


  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.7.4)

2022-10-11 10:39:58.502  INFO 8600 --- [           main] mx.com.gm.HolaSpringApplicationTests     : Starting HolaSpringApplicationTests using Java 17.0.4.1 on LAPTOP-48D0MA3M with PID 8600 (started by Tino in E:\Java\spring\curso-spring\leccion-03\HolaMundoSpringData)
2022-10-11 10:39:58.503  INFO 8600 --- [           main] mx.com.gm.HolaSpringApplicationTests     : No active profile set, falling back to 1 default profile: "default"
2022-10-11 10:40:01.770  INFO 8600 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2022-10-11 10:40:01.819  INFO 8600 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 7 ms. Found 0 JPA repository interfaces.
2022-10-11 10:40:03.879  INFO 8600 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2022-10-11 10:40:04.285  INFO 8600 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2022-10-11 10:40:04.558  INFO 8600 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2022-10-11 10:40:04.653  INFO 8600 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.6.11.Final
2022-10-11 10:40:05.088  INFO 8600 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2022-10-11 10:40:05.514  INFO 8600 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-10-11 10:40:06.643  INFO 8600 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-10-11 10:40:06.681  INFO 8600 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2022-10-11 10:40:08.113  WARN 8600 --- [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2022-10-11 10:40:09.418  INFO 8600 --- [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2022-10-11 10:40:11.399  INFO 8600 --- [           main] mx.com.gm.HolaSpringApplicationTests     : Started HolaSpringApplicationTests in 14.218 seconds (JVM running for 18.481)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.973 s - in mx.com.gm.HolaSpringApplicationTests
2022-10-11 10:40:12.542  INFO 8600 --- [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2022-10-11 10:40:12.546  INFO 8600 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2022-10-11 10:40:12.564  INFO 8600 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

Results:

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0


--- maven-jar-plugin:3.2.2:jar (default-jar) @ HolaMundoSpringData ---
Building jar: E:\Java\spring\curso-spring\leccion-03\HolaMundoSpringData\target\HolaMundoSpringData-1.0.jar

--- spring-boot-maven-plugin:2.7.4:repackage (repackage) @ HolaMundoSpringData ---
Replacing main artifact with repackaged archive

--- maven-install-plugin:2.5.2:install (default-install) @ HolaMundoSpringData ---
Installing E:\Java\spring\curso-spring\leccion-03\HolaMundoSpringData\target\HolaMundoSpringData-1.0.jar to C:\Users\Tino\.m2\repository\mx\com\gm\HolaMundoSpringData\1.0\HolaMundoSpringData-1.0.jar
Installing E:\Java\spring\curso-spring\leccion-03\HolaMundoSpringData\pom.xml to C:\Users\Tino\.m2\repository\mx\com\gm\HolaMundoSpringData\1.0\HolaMundoSpringData-1.0.pom
------------------------------------------------------------------------
BUILD SUCCESS
------------------------------------------------------------------------
Total time:  01:14 min
Finished at: 2022-10-11T10:40:31-05:00
------------------------------------------------------------------------

Básicamente, asegurarse de que se logre el mensaje: "Initialized JPA EntityManagerFactory for persistence unit 'default'", que es parte de la configuración inicial.

Modificar el controlador:

package mx.com.gm.web;

import java.util.Arrays;
import lombok.extern.slf4j.Slf4j;
import mx.com.gm.domain.Persona;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Slf4j
public class ControladorInicio {
    
    @GetMapping("/")
    public String inicio(Model model){
        
        //model.addAttribute("personas", personas);
        
        return "index";
    }
}


Modificar el modelo Persona (clase del dominio):

package mx.com.gm.domain;

import java.io.Serializable;
import javax.persistence.*;
import lombok.Data;

@Data
@Entity
@Table(name = "persona")
public class Persona implements Serializable {
    
    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long idPersona;
    private String nombre;
    private String apellido;
    private String email;
    private String telefono;
}


Crear interfaz DAO en (mx.com.gm.dao):


package mx.com.gm.dao;

import mx.com.gm.domain.Persona;
import org.springframework.data.repository.CrudRepository;

public interface PersonaDao extends CrudRepository<Persona, Long> {
    
}

Al extender la clase CrudRepository, estamos heredando los métodos de dicha clase que representan las operaciones básicas de un CRUD.


Ir al controlador y editarlo:

package mx.com.gm.web;

import java.util.Arrays;
import lombok.extern.slf4j.Slf4j;
import mx.com.gm.dao.PersonaDao;
import mx.com.gm.domain.Persona;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Slf4j
public class ControladorInicio {

    @Autowired
    private PersonaDao personaDao;

    @GetMapping("/")
    public String inicio(Model model) {

        var personas = personaDao.findAll();
        model.addAttribute("personas", personas);

        return "index";
    }
}

Editar la vista:

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Inicio</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <h1>Inicio</h1>
        <div th:if="${personas != null and !personas.empty}">
            <table border="1">
                <tr>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Telefono</th>
                </tr>
                <tr th:each="persona: ${personas}">
                    <td th:text="${persona.nombre}"></td>
                    <td th:text="${persona.apellido}"></td>
                    <td th:text="${persona.email}"></td>
                    <td th:text="${persona.telefono}"></td>
                </tr>
            </table>
        </div>
        <div th:if="${personas == null or personas.empty}">
            <p>La lista de personas está vacía.</p>
        </div>
    </body>
</html>

Ejecutar el programa. Notar que se hace una consulta a la BBDD al cargar los datos a ser visibilizados para el template. El log muestra una consulta en términos del DAO.


Capa de servicio con Spring
---------------------------

Crear una interfaz de servicio:

package mx.com.gm.servicio;

import java.util.List;
import mx.com.gm.domain.Persona;

public interface PersonaService {

    public List<Persona> listarPersonas();

    public void guardarPersona(Persona persona);

    public void eliminarPersona(Persona persona);

    public Persona encontrarPersona(Persona persona);
}


Implementar la interfaz:

package mx.com.gm.servicio;

import java.util.List;
import mx.com.gm.dao.PersonaDao;
import mx.com.gm.domain.Persona;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class PersonaServiceImpl implements PersonaService {
    
    @Autowired
    private PersonaDao personaDao;

    @Override
    @Transactional(readOnly = true)
    public List<Persona> listarPersonas() {
        return (List<Persona>) personaDao.findAll();
    }

    @Override
    @Transactional
    public void guardarPersona(Persona persona) {
        personaDao.save(persona);
    }

    @Override
    @Transactional
    public void eliminarPersona(Persona persona) {
        personaDao.delete(persona);
    }

    @Override
    @Transactional(readOnly = true)
    public Persona encontrarPersona(Persona persona) {
        return personaDao.findById(persona.getIdPersona()).orElse(null);
    }
    
}

Modificar el controlador:

package mx.com.gm.web;

import lombok.extern.slf4j.Slf4j;
import mx.com.gm.servicio.PersonaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Slf4j
public class ControladorInicio {

    @Autowired
    private PersonaService personaService;

    @GetMapping("/")
    public String inicio(Model model) {

        var personas = personaService.listarPersonas();
        model.addAttribute("personas", personas);

        return "index";
    }
}


RESTful API con Spring Boot
===========================

Desde Spring Initializr
-----------------------

Configurar:

Project: Maven Project
Language: Java
Spring Boot: 2.7.4 (o la más reciente versión)
Project Metadata
Group: com.restful
Artifact: apidemo
Name: apidemo
Description: API RESTful con Spring Boot
Package name: com.restful.apidemo
Packaging: War
Java: 17 (o versión estable más reciente)

Agregar dependencias: MySQL, JPA, Spring Boot DevTools

Click en Generar y descargar comprimido.

Desde Netbeans
--------------

Abrir Netbeans -> Open Project -> Abrir carpeta de proyecto descomprimido de Initializr.

En el paquete principal (com.restful.apidemo), crear 4 carpetas que definen el API REST: controllers, models, services y repositories.

Quedaría:

Source packages
-> com.restful.apidemo
--> ApidemoApplication.java (archivo con el método main)
--> ServletInitializer.java
--> com.restful.apidemo.controllers
--> com.restful.apidemo.models
--> com.restful.apidemo.repositories
--> com.restful.apidemo.services

Desde un editor
---------------

Abrir carpeta y crear subcarpetas dentro de com.restful.apidemo: controllers, models, repositories, services

Configurar propiedades de aplicación
------------------------------------

Abrir application.properties desde Other sources:

spring.datasource.url=jdbc:mysql://localhost:3306/apidemo
spring.datasource.username=root
#spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update

La variable "spring.jpa.hibernate.ddl-auto" tomará los siguientes valores:

update: crea desde el proyecto los objetos de la BBDD
none: crea manualmente los objetos de la BBDD

Suponiendo que se desea crear la tabla "persona", debemos recurrir a lo siguiente: 

Modelos
-------

Crear clase:

package com.restful.apidemo.models;

/**
 *
 * @author Tino
 */
public class UsuarioModel {
    private Long id;
    private String nombre;
    private String email;
    private Integer prioridad;
}

Implementar métodos get y set de la clase:

Click derecho -> Insert code -> Generate -> getters and setters

package com.restful.apidemo.models;

public class UsuarioModel {
    private Long id;
    private String nombre;
    private String email;
    private Integer prioridad;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Integer getPrioridad() {
        return prioridad;
    }

    public void setPrioridad(Integer prioridad) {
        this.prioridad = prioridad;
    }
}

Modificar la clase con anotaciones de javax.persistence:

package com.restful.apidemo.models;

import javax.persistence.*;

/**
 *
 * @author Tino
 */
@Entity
@Table(name = "usuario")
public class UsuarioModel {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(unique = true, nullable = false)
    private Long id;
    
    private String nombre;
    private String email;
    private Integer prioridad;

    // ...
}

Probar ejecutando el proyecto: click derecho -> Clean and Build, debe resultar en: "BUILD SUCCESS" y la tabla debe haber sido creada en el esquema en MySQL

O: ejecutar desde la raíz: .\mvnw.cmd spring-boot:run (Windows)


Repositorios
------------

Crear una interfaz para el modelo "Persona":

package com.restful.apidemo.repositories;

import java.util.ArrayList;

import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import com.restful.apidemo.models.UsuarioModel;

@Repository
public interface UsuarioRepository extends CrudRepository<UsuarioModel, Long>  {
    public abstract ArrayList<UsuarioModel> findByPrioridad(Integer prioridad);
}

Esta interfaz hereda los métodos de un CRUD que proceden de la interfaz CrudRepository. Tener en cuenta que requiere ser definida por un modelo y el tipo de dato de la ID en ese modelo: <UsuarioModel, Long>

Servicios
---------

package com.restful.apidemo.services;

import com.restful.apidemo.models.UsuarioModel;
import com.restful.apidemo.repositories.UsuarioRepository;
import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UsuarioService {

    @Autowired
    UsuarioRepository usuarioRepository;

    public ArrayList<UsuarioModel> obtenerUsuarios() {
        return (ArrayList<UsuarioModel>) usuarioRepository.findAll();
    }

    public UsuarioModel guardarUsuario(UsuarioModel usuario) {
        return usuarioRepository.save(usuario);
    }

    public Optional<UsuarioModel> obtenerPorId(Long id) {
        return usuarioRepository.findById(id);
    }

    public ArrayList<UsuarioModel> obtenerPorPrioridad(Integer prioridad) {
        return usuarioRepository.findByPrioridad(prioridad);
    }

    public boolean eliminarUsuario(Long id) {
        try {
            usuarioRepository.deleteById(id);
            return true;
        } catch (Exception err) {
            return false;
        }
    }

}

Controladores
-------------

package com.restful.apidemo.controllers;

import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.restful.apidemo.models.UsuarioModel;
import com.restful.apidemo.services.UsuarioService;

@RestController
@RequestMapping("/usuario")
public class UsuarioController {
    
    @Autowired
    UsuarioService usuarioService;
    
    @GetMapping()
    public ArrayList<UsuarioModel> obtenerUsuarios(){
        return (ArrayList<UsuarioModel>) usuarioService.obtenerUsuarios();
    }
    
    @PostMapping()
    public UsuarioModel guardarUsuario(@RequestBody UsuarioModel usuario){
        return this.usuarioService.guardarUsuario(usuario);
    }
    
    @GetMapping( path = "/{id}")
    public Optional<UsuarioModel> obtenerUsuarioPorId(@PathVariable("id") Long id) {
        return this.usuarioService.obtenerPorId(id);
    }

    @GetMapping("/query")
    public ArrayList<UsuarioModel> obtenerUsuarioPorPrioridad(@RequestParam("prioridad") Integer prioridad){
        return this.usuarioService.obtenerPorPrioridad(prioridad);
    }

    @DeleteMapping( path = "/{id}")
    public String eliminarPorId(@PathVariable("id") Long id){
        boolean ok = this.usuarioService.eliminarUsuario(id);
        if (ok){
            return "Se eliminó el usuario con id " + id;
        }else{
            return "No pudo eliminar el usuario con id" + id;
        }
    }

}


Prueba del API
--------------

POST: http://localhost:8080/usuario

REQ:
{
    "nombre" : "Tino",
	"email" : "tino@mail.com",
	"prioridad" : 4
}

RES:
{
    "id": 1,
    "nombre": "Tino",
    "email": "tino@mail.com",
    "prioridad": 4
}

También debe haberse insertado en la BBDD

GET: http://localhost:8080/usuario

RES:

[
    {
        "id": 1,
        "nombre": "Tino",
        "email": "tino@mail.com",
        "prioridad": 4
    },
    {
        "id": 2,
        "nombre": "Gaby",
        "email": "gaby@mail.com",
        "prioridad": 4
    },
    {
        "id": 3,
        "nombre": "Dante",
        "email": "dante@mail.com",
        "prioridad": 1
    },
    {
        "id": 4,
        "nombre": "Maria",
        "email": "maria@mail.com",
        "prioridad": 2
    },
    {
        "id": 5,
        "nombre": "Richard",
        "email": "richard@mail.com",
        "prioridad": 3
    }
]

GET: http://localhost:8080/usuario/3

RES:

{
    "id": 3,
    "nombre": "Dante",
    "email": "dante@mail.com",
    "prioridad": 1
}

GET: http://localhost:8080/usuario/query?prioridad=4

RES:

[
    {
        "id": 1,
        "nombre": "Tino",
        "email": "tino@mail.com",
        "prioridad": 4
    },
    {
        "id": 2,
        "nombre": "Gaby",
        "email": "gaby@mail.com",
        "prioridad": 4
    }
]


Subir API a hosting (Google Cloud)
----------------------------------







